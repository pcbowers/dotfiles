#!/usr/bin/env bash

# ==================================================================
# GLOBAL VARIABLES
# ==================================================================

# The buffer that should be used when calculating Window Size
window_buffer=5

# Colors
NOCOLOR="\033[0m"
PURPLE="\033[0;35m"
GREEN="\033[0;32m"
BLUE="\033[0;34m"
GRAY="\033[1;30m"
YELLOW="\033[1;33m"

# ==================================================================
# HELPER FUNCTIONS
# ==================================================================

get_row() {
  local COL
  local ROW
  IFS=';' read -sdR -p $'\E[6n' ROW COL
  echo "${ROW#*[}"
}

start_window() {
  # WINDOW_START_ROW is also used by end_window
  WINDOW_START_ROW=$(get_row)
  END=$((START + $1))

  # If the terminal is large enough, start a scrolling window
  if [[ "$START" -lt "$END" ]]; then
    echo -en $(eval "echo '\e[${WINDOW_START_ROW};${END}r\e[${WINDOW_START_ROW}H'")
  fi

  echo -en "${GRAY}"
}

end_window() {
  # If the terminal is large enough, end a scrolling window
  CHECK=$((0 + $1))
  if [[ "$CHECK" -gt 0 ]]; then
    # Clear the lines, just in case they had text
    for ((i = 1; i <= $1; i++)); do
      echo ""
    done

    echo -en $(eval "echo '\e[r\e[${WINDOW_START_ROW}H'")

    # Overwrite the last line
    tput cuu 1
    echo -en "\033[2K"
  fi

  echo -en "${NOCOLOR}"
}

start_log() {
  emoji=${2:-"⏳"}
  color=${3:-"$BLUE"}
  nowrap=${4:-true}

  [[ "$nowrap" == true ]] && tput rmam
  echo -e "${emoji} ${color}$1${NOCOLOR}"
  [[ "$nowrap" == true ]] && tput rmam
}

end_log() {
  emoji=${2:-"✅"}
  color=${3:-"$YELLOW"}
  nowrap=${4:-true}

  [[ "$nowrap" == true ]] && tput rmam
  echo -e "${emoji} ${color}$1${NOCOLOR}"
  [[ "$nowrap" == true ]] && tput smam
}

log() {
  emoji=${2:-"⏭️"}
  color=${3:-"$PURPLE"}
  nowrap=${4:-true}

  [[ "$nowrap" == true ]] && tput rmam
  echo -e "${emoji} ${color}$1${NOCOLOR}"
  [[ "$nowrap" == true ]] && tput smam
}

capitalize() {
  echo "$1" | awk '{print toupper(substr($0,1,1)) substr($0,2) }'
}

# ==================================================================
# INSTALL FUNCTIONS
# ==================================================================

# Apt Packages
# ------------

should_install_apt_packages() {
  [[ ! -x "$(command -v git)" ]] && return 0
  [[ ! -x "$(command -v curl)" ]] && return 0
  [[ ! -x "$(command -v unzip)" ]] && return 0
  [[ ! -x "$(command -v zip)" ]] && return 0
  [[ ! -x "$(command -v zsh)" ]] && return 0
  [[ ! -x "$(command -v python3)" ]] && return 0
  [[ ! -x "$(command -v pip3)" ]] && return 0
  [[ ! -x "$(command -v xdg-open)" ]] && return 0
  return 1
}

install_apt_packages() {
  sudo add-apt-repository ppa:git-core/ppa -y
  sudo apt-get update -y && sudo apt-get upgrade -y
  sudo apt-get install git curl unzip zip zsh python3 python3-pip xdg-utils -y
}

log_apt_packages="Install Apt Packages (git, curl, unzip, zip, zsh, python3, python3-pip, xdg-utils)"

# WSL Utilities
# -------------

should_install_wsl_utilities() {
  [[ ! -x "$(command -v wslview)" ]] && return 0
  [[ ! -f "$HOME/.local/bin/xdg-open" ]] && return 0
  return 1
}

install_wsl_utilities() {
  sudo add-apt-repository ppa:wslutilities/wslu -y
  sudo apt-get update -y && sudo apt-get install wslu -y
  pip3 install --user --upgrade pip
  pip install --user git+https://github.com/cpbotha/xdg-open-wsl.git
}

log_wsl_utilities="Install WSL Utilities"

# SSH Keys
# --------

should_install_ssh_keys() {
  [[ ! -f "$HOME/.ssh/id_ed25519" ]] && return 0
  [[ ! -f "$HOME/.ssh/id_rsa" ]] && return 0
  return 1
}

install_ssh_keys() {
  if [[ ! -f "$HOME/.ssh/id_ed25519" ]]; then
    ssh-keygen -t ed25519 -C "{{ .email }}" -P "{{ .passphrase }}" -f "$HOME/.ssh/id_ed25519"
  fi

  if [[ ! -f "$HOME/.ssh/id_rsa" ]]; then
    ssh-keygen -t rsa -b 4096 -C "{{ .email }}" -P "{{ .passphrase }}" -f "$HOME/.ssh/id_rsa"
  fi
}

post_install_ssh_keys() {
  echo "Make sure to install your SSH keys on all the servers you will be using to authorize this machine." \
    "Use ${BLUE}clip < ~/.ssh/id_ed25519.pub${YELLOW} or ${BLUE}clip < ~/.ssh/id_rsa.pub${YELLOW}" \
    "to copy the key to your clipboard."
}

log_ssh_keys="Generate SSH Keys (ed25519 and rsa)"

# ZSH Shell
# ---------

should_install_zsh_shell() {
  [[ "$SHELL" != "$(which zsh)" ]] && return 0
  return 1
}

install_zsh_shell() {
  chsh -s $(which zsh)
}

post_install_zsh_shell() {
  echo "Make sure to close and re-open your terminal to begin using ZSH as your default Shell."
}

log_zsh_shell="Set ZSH as the Default Shell"

# Tailscale
# ---------

should_install_tailscale() {
  [[ ! -x "$(command -v tailscale)" ]] && return 0
  return 1
}

install_tailscale() {
  curl -fsSL https://tailscale.com/install.sh | sh
}

log_tailscale="Install Tailscale"

# Github CLI
# ----------

should_install_github_cli() {
  [[ ! -x "$(command -v gh)" ]] && return 0
  return 1
}

install_github_cli() {
  curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg
  echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list >/dev/null
  sudo apt-get update -y && sudo apt-get install gh -y
}

log_github_cli="Install Github CLI"

# Rust
# ----

should_install_rust() {
  [[ ! -x "$(command -v cargo)" ]] && return 0
  return 1
}

install_rust() {
  curl --proto "=https" --tlsv1.2 -sSf https://sh.rustup.rs | sh
  source "$HOME/.cargo/env"
}

log_rust="Install Rust"

# FNM
# ---

should_install_fnm() {
  [[ ! -x "$(command -v node)" ]] && return 0
  return 1
}

install_fnm() {
  curl -fsSL https://fnm.vercel.app/install | bash -s -- --skip-shell
  export PATH="/home/pcbowers/.local/share/fnm:$PATH"
  eval "$(fnm env --use-on-cd)"
  fnm install --lts
  nvm install-latest-npm
}

log_fnm="Install FNM"

# Deno
# ----

should_install_deno() {
  [[ ! -x "$(command -v deno)" ]] && return 0
  return 1
}

install_deno() {
  curl -fsSL https://deno.land/x/install/install.sh | sh
}

log_deno="Install Deno"

# PNPM
# ----

should_install_pnpm() {
  [[ ! -x "$(command -v pnpm)" ]] && return 0
  return 1
}

install_pnpm() {
  curl -fsSL https://get.pnpm.io/install.sh | sh -
}

log_pnpm="Install PNPM"

# SDKMAN!
# -------

should_install_sdkman() {
  [[ ! -d "$HOME/.sdkman" ]] && return 0
  return 1
}

install_sdkman() {
  curl -s "https://get.sdkman.io" | bash
  source "$HOME/.sdkman/bin/sdkman-init.sh"
  sdk install java
}

log_sdkman="Install SDKMAN!"

# Antidote
# --------

should_install_antidote() {
  [[ ! -d "$HOME/.antidote" ]] && return 0
  return 1
}

install_antidote() {
  git clone --depth=1 https://github.com/mattmc3/antidote.git "$HOME/.antidote"
}

log_antidote="Install Antidote"

# Starship
# --------

should_install_starship() {
  [[ ! -x "$(command -v starship)" ]] && return 0
  return 1
}

install_starship() {
  curl -sS https://starship.rs/install.sh | sh
  eval "$(starship init zsh)"
}

log_starship="Install Starship"

# Editors
# -------

should_install_editors() {
  [[ ! -x "$(command -v vim)" ]] && return 0
  [[ ! -x "$(command -v nvim)" ]] && return 0
  return 1
}

install_editors() {
  sudo add-apt-repository ppa:neovim-ppa/unstable -y
  sudo apt-get update -y && sudo apt-get install vim neovim -y
  rm -rf ~/.config/nvim
  rm -rf ~/.local/share/nvim
  git clone https://github.com/NvChad/NvChad ~/.config/nvim --depth 1
}

log_editors="Install Vim and NeoVim (along with NvChad)"

# Bat
# ---

should_install_bat() {
  [[ ! -x "$(command -v bat)" ]] && return 0
  return 1
}

install_bat() {
  curl -sLO https://github.com/sharkdp/bat/releases/download/v0.22.1/bat-musl_0.22.1_amd64.deb
  sudo mv ./bat-*.deb /tmp/
  sudo apt-get install -y /tmp/bat-*.deb
}

log_bat="Install Bat v0.23.0"

# LSD
# ---

should_install_lsd() {
  [[ ! -x "$(command -v lsd)" ]] && return 0
  return 1
}

install_lsd() {
  curl -sLO https://github.com/Peltoche/lsd/releases/download/0.23.1/lsd_0.23.1_amd64.deb
  sudo mv ./lsd_*.deb /tmp/
  sudo apt-get install -y /tmp/lsd_*.deb
}

log_lsd="Install LSD v0.23.1"

# 1Password
# ---------

should_install_1password() {
  [[ ! -x "$(command -v op)" ]] && return 0
  return 1
}

install_1password() {
  curl -sS https://downloads.1password.com/linux/keys/1password.asc | sudo gpg --dearmor --output /usr/share/keyrings/1password-archive-keyring.gpg
  echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/1password-archive-keyring.gpg] https://downloads.1password.com/linux/debian/$(dpkg --print-architecture) stable main" | sudo tee /etc/apt/sources.list.d/1password.list
  sudo mkdir -p /etc/debsig/policies/AC2D62742012EA22/
  curl -sS https://downloads.1password.com/linux/debian/debsig/1password.pol | sudo tee /etc/debsig/policies/AC2D62742012EA22/1password.pol
  sudo mkdir -p /usr/share/debsig/keyrings/AC2D62742012EA22
  curl -sS https://downloads.1password.com/linux/keys/1password.asc | sudo gpg --dearmor --output /usr/share/debsig/keyrings/AC2D62742012EA22/debsig.gpg
  sudo apt-get update -y && sudo apt-get install 1password-cli -y
  op account add --address "{{ .domainOP }}.1password.com" --email "{{ .emailOP }}"
}

log_1password="Install 1Password"

# Go
# --

should_install_go() {
  [[ ! -x "$(command -v go)" ]] && return 0
  return 1
}

install_go() {
  curl -sLO https://go.dev/dl/go1.20.4.linux-amd64.tar.gz
  sudo rm -rf /usr/local/go
  sudo tar -C /usr/local -xzf go*.linux-amd64.tar.gz
  sudo rm go*.linux-amd64.tar.gz
}

log_go="Install Go v1.20.4"

# Fastfetch
# ---------

should_install_fastfetch() {
  [[ ! -x "$(command -v fastfetch)" ]] && return 0
  return 1
}

install_fastfetch() {
  curl -sLO https://github.com/LinusDierheimer/fastfetch/releases/download/1.11.0/fastfetch-1.11.0-Linux.deb
  sudo mv ./fastfetch-*.deb /tmp/
  sudo apt-get install -y /tmp/fastfetch-*.deb
}

log_fastfetch="Install Fastfetch v1.11.0"

# Caddy
# -----

should_install_caddy() {
  [[ ! -x "$(command -v caddy)" ]] && return 0
  return 1
}

install_caddy() {
  sudo apt install -y debian-keyring debian-archive-keyring apt-transport-https
  curl -1sLf 'https://dl.cloudsmith.io/public/caddy/stable/gpg.key' | sudo gpg --dearmor -o /usr/share/keyrings/caddy-stable-archive-keyring.gpg
  curl -1sLf 'https://dl.cloudsmith.io/public/caddy/stable/debian.deb.txt' | sudo tee /etc/apt/sources.list.d/caddy-stable.list
  sudo apt update
  sudo apt install caddy
}

log_caddy="Install Caddy"

# ==================================================================
# MAIN SCRIPT
# ==================================================================

# Clear screen
clear -x

# Define installs
packages_to_install=(
  "apt_packages"
  {{- if .isWSL }} "wsl_utilities" {{- end }}
  "zsh_shell"
  "antidote"
  "ssh_keys"
  "tailscale"
  "github_cli"
  "rust"
  "fnm"
  "deno"
  "pnpm"
  "sdkman"
  "starship"
  "editors"
  "bat"
  "lsd"
  "1password"
  "go"
  "fastfetch"
  "caddy"
)

# Set window size, Calculated By available space and buffer
window_size=$(($(eval "tput lines") - ${#packages_to_install[@]} - window_buffer))

# Install packages
for package in "${packages_to_install[@]}"; do
  log_name="log_$package"
  if eval "should_install_$package"; then
    start_log "${!log_name} ${GRAY}...${NOCOLOR}"
    start_window "$window_size"
    eval "just_installed_$package=true"
    eval "install_$package"
    end_window "$window_size"
    end_log "${!log_name} ${GRAY}Complete${NOCOLOR}"
  else
    log "${!log_name} ${GRAY}Already Complete${NOCOLOR}"
  fi
done

# Log comments after installation
for package in "${packages_to_install[@]}"; do
  func_name="post_install_$package"
  eval "just_installed=\$just_installed_$package"
  if [[ $(type -t $func_name) == function ]]; then
    if [[ $just_installed == true ]]; then
      echo ""
      log "$(eval "$func_name")" "💡" "$YELLOW" false
    fi
  fi
done

# End script
echo -e "${GREEN}"
echo "📦 Package Installation Complete! Your terminal is ready to go!"
echo -en "${NOCOLOR}"
